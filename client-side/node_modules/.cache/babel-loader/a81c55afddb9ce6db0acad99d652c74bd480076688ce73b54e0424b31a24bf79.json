{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ME\\\\Desktop\\\\\\u05D1\\u05DC\\u05D9 \\u05EA\\u05DB\\u05E0\\u05D5\\u05EA\\\\node.js\\\\finalProject\\\\client-side\\\\src\\\\components\\\\backgrounds.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { getAllBackgrounds } from \"../services/backgroundService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Backgrounds = () => {\n  _s();\n  const [images, setImages] = useState([]);\n  const [loadError, setLoadError] = useState(false); // ניהול שגיאות טעינה\n\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const data = await getAllBackgrounds();\n        setImages(data);\n      } catch (error) {\n        console.error(\"Error fetching images:\", error);\n        setLoadError(true);\n      }\n    };\n    fetchImages();\n  }, []);\n  const convertDriveUrl = originalUrl => {\n    const fileIdMatch = originalUrl.match(/[-\\w]{25,}/);\n    return fileIdMatch ? `https://drive.google.com/thumbnail?id=${fileIdMatch[0]}&sz=w1000` : originalUrl;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loadError ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error loading images.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this) : images.length > 0 ? images.map((img, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: convertDriveUrl(img.url),\n      alt: `Image ${index}`,\n      width: \"200\",\n      onError: e => {\n        console.error(\"Image failed to load:\", e.target.src);\n        e.target.src = \"path/to/placeholder/image.jpg\"; // תמונה חלופית\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading images...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(Backgrounds, \"59kkSuwxWg2Bpn+EWs3DNFSb6Fo=\");\n_c = Backgrounds;\nvar _c;\n$RefreshReg$(_c, \"Backgrounds\");","map":{"version":3,"names":["useEffect","useState","getAllBackgrounds","jsxDEV","_jsxDEV","Backgrounds","_s","images","setImages","loadError","setLoadError","fetchImages","data","error","console","convertDriveUrl","originalUrl","fileIdMatch","match","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","img","index","src","url","alt","width","onError","e","target","_c","$RefreshReg$"],"sources":["C:/Users/ME/Desktop/בלי תכנות/node.js/finalProject/client-side/src/components/backgrounds.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { getAllBackgrounds } from \"../services/backgroundService\";\r\n\r\nexport const Backgrounds = () => {\r\n    const [images, setImages] = useState([]);\r\n    const [loadError, setLoadError] = useState(false); // ניהול שגיאות טעינה\r\n\r\n    useEffect(() => {\r\n        const fetchImages = async () => {\r\n            try {\r\n                const data = await getAllBackgrounds();\r\n                setImages(data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching images:\", error);\r\n                setLoadError(true);\r\n            }\r\n        };\r\n\r\n        fetchImages();\r\n    }, []);\r\n\r\n    const convertDriveUrl = (originalUrl) => {\r\n        const fileIdMatch = originalUrl.match(/[-\\w]{25,}/);\r\n        return fileIdMatch ? `https://drive.google.com/thumbnail?id=${fileIdMatch[0]}&sz=w1000` : originalUrl;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loadError ? (\r\n                <p>Error loading images.</p>\r\n            ) : images.length > 0 ? (\r\n                images.map((img, index) => (\r\n                    <img\r\n                        key={index}\r\n                        src={convertDriveUrl(img.url)}\r\n                        alt={`Image ${index}`}\r\n                        width=\"200\"\r\n                        onError={(e) => {\r\n                            console.error(\"Image failed to load:\", e.target.src);\r\n                            e.target.src = \"path/to/placeholder/image.jpg\"; // תמונה חלופית\r\n                        }}\r\n                    />\r\n                ))\r\n            ) : (\r\n                <p>Loading images...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,iBAAiB,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnDD,SAAS,CAAC,MAAM;IACZ,MAAMW,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMV,iBAAiB,CAAC,CAAC;QACtCM,SAAS,CAACI,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CH,YAAY,CAAC,IAAI,CAAC;MACtB;IACJ,CAAC;IAEDC,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,eAAe,GAAIC,WAAW,IAAK;IACrC,MAAMC,WAAW,GAAGD,WAAW,CAACE,KAAK,CAAC,YAAY,CAAC;IACnD,OAAOD,WAAW,GAAG,yCAAyCA,WAAW,CAAC,CAAC,CAAC,WAAW,GAAGD,WAAW;EACzG,CAAC;EAED,oBACIZ,OAAA;IAAAe,QAAA,EACKV,SAAS,gBACNL,OAAA;MAAAe,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAC5BhB,MAAM,CAACiB,MAAM,GAAG,CAAC,GACjBjB,MAAM,CAACkB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAClBvB,OAAA;MAEIwB,GAAG,EAAEb,eAAe,CAACW,GAAG,CAACG,GAAG,CAAE;MAC9BC,GAAG,EAAE,SAASH,KAAK,EAAG;MACtBI,KAAK,EAAC,KAAK;MACXC,OAAO,EAAGC,CAAC,IAAK;QACZnB,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEoB,CAAC,CAACC,MAAM,CAACN,GAAG,CAAC;QACpDK,CAAC,CAACC,MAAM,CAACN,GAAG,GAAG,+BAA+B,CAAC,CAAC;MACpD;IAAE,GAPGD,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQb,CACJ,CAAC,gBAEFnB,OAAA;MAAAe,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC1B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACjB,EAAA,CA7CWD,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}